ðŸŽ¨ Primary (Purple Shades)

Purple Main: #9333ea

Purple Dark: #7e22ce

Purple Light: #c084fc

ðŸŸ¢ Secondary (Greens / Teals)

Emerald Green: #10b981

Teal: #14b8a6

âšª Neutrals (Backgrounds & Text)

White: #ffffff

Gray 50: #f9fafb

Gray 700: #374151

Gray 900: #111827

ðŸ”† Highlights / Alerts

Amber: #f59e0b

Rose: #ef4444



=================== script.js file logic ============================
// =============== toast notification logic ==================

const toastContainer = document.getElementById('toast-container');
let currentToast = null; // Variable to store the currently active toast

function notify(message, type = 'success', duration = 3000) {
    // If a toast is already visible, dismiss it first
    if (currentToast) {
        dismissToast(currentToast);
    }
    
    const toast = document.createElement('div');
    toast.className = `toast ${type}`;
    
    if (type === 'loading') {
        // Special case for loading toast with a spinner
        toast.innerHTML = `${message} <div class="loading-spinner"></div>`;
    } else {
        toast.textContent = message;
    }

    toast.addEventListener('click', () => {
        dismissToast(toast);
    });

    toastContainer.appendChild(toast);
    currentToast = toast; // Store reference to the new toast

    setTimeout(() => {
        toast.classList.add('show');
    }, 10);

    // Only set a timeout to automatically dismiss for success/error messages
    if (type !== 'loading') {
        setTimeout(() => {
            dismissToast(toast);
        }, duration);
    }
}

// dismiss toast message
function dismissToast(toastElement) {
    toastElement.classList.remove('show');
    toastElement.addEventListener('transitionend', () => {
        if (!toastElement.classList.contains('show')) {
            toastElement.remove();
            if (currentToast === toastElement) {
                currentToast = null; 
            }
        }
    }, { once: true });
}


// ===== Floating label for Contact Form =====
document.querySelectorAll(".contact-form .input-box input, .contact-form .input-box textarea")
    .forEach(field => {
        const box = field.closest(".input-box");

        field.addEventListener("focus", () => {
            box.classList.add("hide-label");
        });

        field.addEventListener("blur", () => {
            if (field.checkValidity() && field.value.trim() !== "") {
                box.classList.add("hide-label");
            } else {
                box.classList.remove("hide-label");
            }
        });
    });


// ===== Contact Form Validation =====
const contactForm = document.getElementById("contactForm");
const nameInput = document.getElementById("name");
const emailInput = document.getElementById("email");
const msgInput = document.getElementById("msg");

const nameError = document.getElementById("nameError");
const emailError = document.getElementById("emailError");
const msgError = document.getElementById("msgError");

function validateName() {
    const name = nameInput.value.trim();
    if (name === "") {
        nameError.textContent = "Name is required.";
        return false;
    } else if (name.length < 3 || name.length > 20) {
        nameError.textContent = "Name must be between 3 and 20 characters.";
        return false;
    } else {
        nameError.textContent = "";
        return true;
    }
}

function validateEmail() {
    const email = emailInput.value.trim();
    const pattern = /^[^ ]+@[^ ]+\.[a-z]{2,}$/;
    if (email === "") {
        emailError.textContent = "Email is required.";
        return false;
    } else if (!pattern.test(email)) {
        emailError.textContent = "Invalid email format.";
        return false;
    } else {
        emailError.textContent = "";
        return true;
    }
}

function validateMsg() {
    const msg = msgInput.value.trim();
    if (msg === "") {
        msgError.textContent = "Message cannot be empty.";
        return false;
    } else if (msg.length < 10) {
        msgError.textContent = "Message must be at least 10 characters.";
        return false;
    } else {
        msgError.textContent = "";
        return true;
    }
}

// Trigger validation on blur
nameInput.addEventListener("blur", validateName);
emailInput.addEventListener("blur", validateEmail);
msgInput.addEventListener("blur", validateMsg);

// Contact Form Submission
contactForm.addEventListener("submit", async (e) => {
    e.preventDefault();

    const isNameValid = validateName();
    const isEmailValid = validateEmail();
    const isMsgValid = validateMsg();

    if (!(isNameValid && isEmailValid && isMsgValid)) {
        notify("Please fill out the form correctly.", "error"); // Added feedback for invalid form
        return;
    }

    const formData = {
        name: nameInput.value.trim(),
        email: emailInput.value.trim(),
        message: msgInput.value.trim(),
    };

    // Show loading toast immediately after validation passes
    notify("Submitting form...", "loading");

    try {
        const response = await fetch("https://your-backend-api.com/contact", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(formData)
        });

        if (response.ok) {
            notify("Form submitted successfully!", "success");
            contactForm.reset();
        } else {
            notify("Something went wrong. Try again.", "error");
        }
    } catch (err) {
        notify("Error: Could not connect to server.", "error");
    }
});

// ===== Newsletter Form Handling =====
const newsletterForm = document.querySelector(".newsletter-form");
const newsletterInput = newsletterForm.querySelector("input[type='email']");

newsletterForm.addEventListener("submit", async (e) => {
    e.preventDefault();

    const email = newsletterInput.value.trim();
    const pattern = /^[^ ]+@[^ ]+\.[a-z]{2,}$/;

    if (email === "") {
        notify("Email is required.", "error");
        return;
    }
    if (!pattern.test(email)) {
        notify("Invalid email format.", "error");
        return;
    }

    // Show loading toast immediately after validation passes
    notify("Subscribing...", "loading");

    try {
        const response = await fetch("https://your-backend-api.com/newsletter", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ email })
        });

        if (response.ok) {
            notify("Subscribed successfully!", "success");
            newsletterForm.reset();
        } else {
            notify("Subscription failed. Try again.", "error");
        }
    } catch (err) {
        notify("Error: Could not connect to server.", "error");
    }
});


// ============== FAQ Accordion =================

const faqItems = document.querySelectorAll('.faq-item');

faqItems.forEach(item => {
    const question = item.querySelector('.faq-question');
    
    question.addEventListener('click', () => {
        // Close all other FAQs
        faqItems.forEach(i => {
            if (i !== item) i.classList.remove('active');
        });
        
        // Toggle current
        item.classList.toggle('active');
    });
});


// ============== aminations for the web page ====================

document.addEventListener("DOMContentLoaded", () => {
    const elements = document.querySelectorAll(".fade-in, .slide-left, .slide-right");

    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add("show");
                observer.unobserve(entry.target);
            }
        });
    }, { threshold: 0.2 });

    elements.forEach(el => observer.observe(el));
});





============================= auth.js file logic ========================================



// ================== Toggle Login & Register ==================
const loginForm = document.getElementById("login-form");
const registerForm = document.getElementById("register-form");
const showRegister = document.getElementById("show-register");
const showLogin = document.getElementById("show-login");

// Show Register Form
showRegister.addEventListener("click", (e) => {
    e.preventDefault();
    loginForm.classList.add("hidden");
    registerForm.classList.remove("hidden");
});

// Show Login Form
showLogin.addEventListener("click", (e) => {
    e.preventDefault();
    registerForm.classList.add("hidden");
    loginForm.classList.remove("hidden");
});

// After successful registration â†’ switch to Login Form
function switchToLoginAfterRegister() {
    registerForm.reset();
    registerForm.classList.add("hidden");
    loginForm.classList.remove("hidden");
}


// =============== toast notification logic ==================

const toastContainer = document.getElementById('toast-container');
let currentToast = null; // Variable to store the currently active toast

function notify(message, type = 'success', duration = 3000) {
    // If a toast is already visible, dismiss it first
    if (currentToast) {
        dismissToast(currentToast);
    }
    
    const toast = document.createElement('div');
    toast.className = `toast ${type}`;
    
    if (type === 'loading') {
        // Special case for loading toast with a spinner
        toast.innerHTML = `${message} <div class="loading-spinner"></div>`;
    } else {
        toast.textContent = message;
    }

    toast.addEventListener('click', () => {
        dismissToast(toast);
    });

    toastContainer.appendChild(toast);
    currentToast = toast; // Store reference to the new toast

    setTimeout(() => {
        toast.classList.add('show');
    }, 10);

    // Only set a timeout to automatically dismiss for success/error messages
    if (type !== 'loading') {
        setTimeout(() => {
            dismissToast(toast);
        }, duration);
    }
}

// dismiss toast message
function dismissToast(toastElement) {
    toastElement.classList.remove('show');
    toastElement.addEventListener('transitionend', () => {
        if (!toastElement.classList.contains('show')) {
            toastElement.remove();
            if (currentToast === toastElement) {
                currentToast = null; 
            }
        }
    }, { once: true });
}

// ================== Navbar auth button status  and Logout handling =================

const authBtn = document.querySelector(".sign-up"); // make sure button exists

async function updateNavbarAuthState() {
    // Get a valid token (refresh if expired)
    const token = await getValidAccessToken();

    if (token) {
        authBtn.textContent = "Logout";
        authBtn.onclick = handleLogout;
    } else {
        authBtn.textContent = "Sign up";
        authBtn.onclick = () => window.location.href = "auth.html";
    }
}

// Logout handler
async function handleLogout() {
    const refreshToken = getRefreshToken();
    notify("Logging out...", "loading");

    try {
        if (refreshToken) {
            const res = await fetch("http://localhost:8080/auth/logout", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ refreshToken }), // backend removing it from DB
            });

            if (!res.ok) {
                console.warn("Backend logout failed:", await res.text());
            }
        }
    } catch (err) {
        console.error("Logout request failed:", err);
    }
    clearTokens();  
    updateNavbarAuthState();
    notify("Logged out successfully!", "success");
    setTimeout(() => {
        if (!window.location.pathname.includes("index.html")) {
            window.location.href = "index.html";
        } else {
            window.location.reload();
        }
    }, 1200);
}

// --------- Call on Page Load ---------
document.addEventListener("DOMContentLoaded", () => {
    updateNavbarAuthState();
});


// ================== Helper: Token Storage ==================

function saveTokens({ accessToken, refreshToken }) {
    localStorage.setItem("accessToken", accessToken);
    localStorage.setItem("refreshToken", refreshToken);
}

function getAccessToken() {
    return localStorage.getItem("accessToken");
}

function getRefreshToken() {
    return localStorage.getItem("refreshToken");
}

function clearTokens() {
    localStorage.removeItem("accessToken");
    localStorage.removeItem("refreshToken");
}

// Refresh Access Token using Refresh Token
async function refreshAccessToken() {
    const refreshToken = getRefreshToken();
    if (!refreshToken) return null;

    try {
        const res = await fetch("https://localhost:8080/auth/refresh", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ refreshToken }),
        });

        if (res.ok) {
            const data = await res.json();
            saveTokens(data); // expects { accessToken, refreshToken }
            return data.accessToken;
        } else {
            clearTokens();
            return null;
        }
    } catch (err) {
        console.error("Refresh failed:", err);
        clearTokens();
        return null;
    }
}

// Get a valid access token (refresh if expired)
async function getValidAccessToken() {
    let token = getAccessToken();
    if (!token) return null;

    // Decode JWT to check expiry
    const payload = JSON.parse(atob(token.split(".")[1]));
    const now = Date.now() / 1000;

    if (payload.exp < now) {
        console.log("Access token expired. Refreshing...");
        token = await refreshAccessToken();
    }

    return token;
}

// ================== Login Validation ==================
const loginEmail = document.getElementById("login-email");
const loginPassword = document.getElementById("login-password");
const loginEmailError = document.getElementById("loginEmailError");
const loginPasswordError = document.getElementById("loginPasswordError");

function validateLoginEmail() {
    const email = loginEmail.value.trim();
    const pattern = /^[^ ]+@[^ ]+\.[a-z]{2,}$/;
    if (email === "") {
        loginEmailError.textContent = "Email is required.";
        return false;
    } else if (!pattern.test(email)) {
        loginEmailError.textContent = "Invalid email format.";
        return false;
    } else {
        loginEmailError.textContent = "";
        return true;
    }
}

function validateLoginPassword() {
    const password = loginPassword.value.trim();
    if (password === "") {
        loginPasswordError.textContent = "Password is required.";
        return false;
    } else if (password.length < 6) {
        loginPasswordError.textContent = "Password must be at least 6 characters.";
        return false;
    } else {
        loginPasswordError.textContent = "";
        return true;
    }
}

loginEmail.addEventListener("blur", validateLoginEmail);
loginPassword.addEventListener("blur", validateLoginPassword);

loginForm.addEventListener("submit", async (e) => {
    e.preventDefault();

    const validEmail = validateLoginEmail();
    const validPass = validateLoginPassword();
    if (!(validEmail && validPass)) return;

    const loginData = {
        email: loginEmail.value.trim(),
        password: loginPassword.value.trim(),
    };

    // Show loading toast immediately after validation passes
    notify("Logging in...", "loading");

    try {
        const res = await fetch("http://localhost:8080/auth/login", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(loginData),
        });

        if (res.ok) {
            const data = await res.json();
            saveTokens(data); // store accessToken + refreshToken
            notify("Login successful!", "success");
            loginForm.reset();
            updateNavbarAuthState();
            // window.location.href = "dashboard.html"
        } else {
            const err = await res.json();
            notify("Invalid credentials.", "error");
        }
    } catch (err) {
        notify("Could not connect to server!", "error");
    }
});

// ================== Register Validation ==================
const regName = document.getElementById("reg-name");
const regEmail = document.getElementById("reg-email");
const regPassword = document.getElementById("reg-password");
const regConfirmPassword = document.getElementById("reg-confirm-password");

const regNameError = document.getElementById("regNameError");
const regEmailError = document.getElementById("regEmailError");
const regPasswordError = document.getElementById("regPasswordError");
const regConfirmError = document.getElementById("regConfirmError");

function validateRegName() {
    const name = regName.value.trim();
    if (name === "") {
        regNameError.textContent = "Name is required.";
        return false;
    } else if (name.length < 3) {
        regNameError.textContent = "Name must be at least 3 characters.";
        return false;
    } else {
        regNameError.textContent = "";
        return true;
    }
}

function validateRegEmail() {
    const email = regEmail.value.trim();
    const pattern = /^[^ ]+@[^ ]+\.[a-z]{2,}$/;
    if (email === "") {
        regEmailError.textContent = "Email is required.";
        return false;
    } else if (!pattern.test(email)) {
        regEmailError.textContent = "Invalid email format.";
        return false;
    } else {
        regEmailError.textContent = "";
        return true;
    }
}

function validateRegPassword() {
    const password = regPassword.value.trim();
    if (password === "") {
        regPasswordError.textContent = "Password is required.";
        return false;
    } else if (password.length < 6) {
        regPasswordError.textContent = "Password must be at least 6 characters.";
        return false;
    } else {
        regPasswordError.textContent = "";
        return true;
    }
}

function validateRegConfirmPassword() {
    const confirm = regConfirmPassword.value.trim();
    if (confirm !== regPassword.value.trim()) {
        regConfirmError.textContent = "Passwords do not match.";
        return false;
    } else {
        regConfirmError.textContent = "";
        return true;
    }
}

regName.addEventListener("blur", validateRegName);
regEmail.addEventListener("blur", validateRegEmail);
regPassword.addEventListener("blur", validateRegPassword);
regConfirmPassword.addEventListener("blur", validateRegConfirmPassword);

registerForm.addEventListener("submit", async (e) => {
    e.preventDefault();

    const validName = validateRegName();
    const validEmail = validateRegEmail();
    const validPass = validateRegPassword();
    const validConfirm = validateRegConfirmPassword();

    if (!(validName && validEmail && validPass && validConfirm)) return;

    const regData = {
        name: regName.value.trim(),
        email: regEmail.value.trim(),
        password: regPassword.value.trim(),
    };

    // Show loading toast immediately after validation passes
    notify("Registering...", "loading");

    try {
        const res = await fetch("http://localhost:8080/auth/register", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(regData),
        });

        if (res.ok) {
            const data = await res.json();
            saveTokens(data); // store tokens immediately after register
            notify("Registration successful! ", "success");
            console.log("Registration successful, tokens saved!");
            // registerForm.reset();
            // registerForm.style.display = "none";
            // loginForm.style.display = "flex";
            switchToLoginAfterRegister();

        } else {
            const err = await res.json();
            notify(`Registration failed: ${err.message}`, "error");
        }
    } catch (err) {
        notify("could not connect to server. Try again.", "error");
    }
});

// ================= observer animation =================

// Intersection Observer for fade-in animation
document.addEventListener("DOMContentLoaded", () => {
  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.add("show");
          observer.unobserve(entry.target); // animate once
        }
      });
    },
    { threshold: 0.2 }
  );

  document.querySelectorAll(".fade-in").forEach((el) => {
    observer.observe(el);
  });
});


============================ gemini dashboard.html ========================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard | Expense Tracker</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">
    <link rel="stylesheet" href="CSS/dashboard.css">
    <script async src="https://www.googletagmanager.com/gtag/js?id=YOUR_GA_ID"></script>
    <script>
        window.dataLayer = window.dataLayer || [];
        function gtag(){dataLayer.push(arguments);}
        gtag('js', new Date());
        gtag('config', 'YOUR_GA_ID');
    </script>
</head>
<body>

    <div id="toast-container"></div>

    <nav class="nav-bar fade-in">
      <div class="nav-left">
        <h2>Expense Tracker</h2>
      </div>
      <div class="nav-right">
        <ul class="nav-links">
          <li><a href="#">Home</a></li>
          <li><a href="#">Features</a></li>
          <li><a href="#">About</a></li>
          <li><a href="#">Policy</a></li>
          <button class="sign-up" id="logout-btn">Sign up</button>
        </ul>
      </div>
    </nav>
    
    <div class="layout grid">
        <aside class="sidebar slide-left">
            <div class="profile-card">
                <img src="placeholder-avatar.png" alt="User Avatar" class="profile-avatar">
                <h4 class="profile-name" id="user-name">John Doe</h4>
                <p class="profile-email">john.doe@example.com</p>
            </div>
            <ul class="nav-links">
                <li><a href="#" data-page="dashboard"><i class="fa-solid fa-chart-line"></i> Dashboard</a></li>
                <li><a href="#" data-page="add-transaction"><i class="fa-solid fa-plus-circle"></i> Add Transaction</a></li>
                <li><a href="#" data-page="reports"><i class="fa-solid fa-chart-pie"></i> Reports</a></li>
                <li><a href="#" data-page="budgets"><i class="fa-solid fa-money-check-dollar"></i> Budgets</a></li>
                <li><a href="#" data-page="categories"><i class="fa-solid fa-tags"></i> Categories</a></li>
                <li><a href="#" data-page="import-export"><i class="fa-solid fa-exchange-alt"></i> Import/Export</a></li>
                <li><a href="#" data-page="settings"><i class="fa-solid fa-cog"></i> Settings</a></li>
            </ul>
            <div class="sidebar-footer-links">
                <a href="#">Help</a>
                <a href="#">Log Out</a>
            </div>
        </aside>

        <main class="main-content">
            
            <section id="dashboard-view" class="page-section">
                <section class="header-row">
                    <div class="breadcrumbs"><span>Dashboard</span></div>
                    <div class="controls"><input type="text" class="date-range-picker" placeholder="Select Date Range"></div>
                </section>
                <section class="overview-cards fade-in">
                    <article class="card balance-card">
                        <h4>Current Balance</h4>
                        <span class="big-number" id="total-balance">$12,345</span>
                        <div class="sparkline-placeholder"></div>
                    </article>
                    <article class="card spend-card">
                        <h4>This Month Spend</h4>
                        <span class="amount" id="total-expenses">$2,500</span>
                        <span class="percentage-change">(-5% from last month)</span>
                    </article>
                    <article class="card income-card">
                        <h4>Income</h4>
                        <span class="amount" id="total-income">$4,800</span>
                    </article>
                    <article class="card budget-card">
                        <h4>Savings / Budget</h4>
                        <span class="amount">$750 remaining</span>
                    </article>
                </section>
                <section class="dashboard-grid">
                    <article class="chart-card slide-right">
                        <h3>Expenses Over Time</h3>
                        <div class="chart-placeholder"></div>
                        <div class="toggle-buttons">
                            <button>Weekly</button>
                            <button>Monthly</button>
                            <button>Yearly</button>
                        </div>
                    </article>
                    <article class="pie-card slide-left">
                        <h3>Category Distribution</h3>
                        <div class="pie-chart-placeholder"></div>
                    </article>
                    <article class="transactions-card fade-in">
                        <h3>Recent Transactions</h3>
                        <div class="table-placeholder">
                            <table id="transactions-table">
                                <thead>
                                    <tr>
                                        <th>Description</th>
                                        <th>Amount</th>
                                        <th>Type</th>
                                        <th>Date</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    </tbody>
                            </table>
                        </div>
                    </article>
                    <article class="quick-add-card fade-in">
                        <h3>Quick Add Expense</h3>
                        <form id="quick-add-form">
                            <div class="form-group">
                                <label for="quick-description">Description</label>
                                <input type="text" id="quick-description" required>
                            </div>
                            <div class="form-group">
                                <label for="quick-amount">Amount</label>
                                <input type="number" id="quick-amount" step="0.01" required>
                            </div>
                            <div class="form-group">
                                <label for="quick-type">Type</label>
                                <select id="quick-type" required>
                                    <option value="expense">Expense</option>
                                    <option value="income">Income</option>
                                </select>
                            </div>
                            <button type="submit">Add Transaction</button>
                        </form>
                    </article>
                </section>
                <section class="reports-section">
                    <h3>Reports</h3>
                    <div class="report-links">
                        <a href="#">Export Data</a>
                        <a href="#">Monthly Report</a>
                        <a href="#">View Trends</a>
                    </div>
                </section>
                <section class="activity-log">
                    <h3>Activity Log</h3>
                    <div class="timeline-placeholder"><p>Timeline of recent events and notifications.</p></div>
                </section>
            </section>

            <section id="add-transaction-view" class="page-section" style="display: none;">
                <h2>Add New Transaction</h2>
                <p>Use the form below to add a new expense or income entry.</p>
                <div class="form-container">
                    <form id="add-transaction-form" class="transaction-form">
                        <div class="form-group">
                            <label for="transaction-description">Description</label>
                            <input type="text" id="transaction-description" placeholder="e.g., Groceries, Dinner with friends" required>
                        </div>
                        <div class="form-group">
                            <label for="transaction-amount">Amount</label>
                            <input type="number" id="transaction-amount" step="0.01" placeholder="e.g., 50.00" required>
                        </div>
                        <div class="form-group">
                            <label for="transaction-type">Type</label>
                            <select id="transaction-type" required>
                                <option value="expense">Expense</option>
                                <option value="income">Income</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="transaction-category">Category</label>
                            <select id="transaction-category" required>
                                <option value="">Select a Category</option>
                                <option value="food">Food</option>
                                <option value="transportation">Transportation</option>
                                <option value="bills">Bills</option>
                                <option value="salary">Salary</option>
                                <option value="other">Other</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="transaction-date">Date</label>
                            <input type="date" id="transaction-date" required>
                        </div>
                        <button type="submit">Add Transaction</button>
                    </form>
                </div>
            </section>
            
            <section id="reports-view" class="page-section" style="display: none;">
                <h2>Financial Reports</h2>
                <div class="page-content">
                    <p>Detailed charts and tables for monthly, quarterly, and yearly reports will appear here.</p>
                </div>
            </section>
            <section id="budgets-view" class="page-section" style="display: none;">
                <h2>Budget Management</h2>
                <div class="page-content">
                    <p>This is where you'll create and manage your spending budgets for different categories.</p>
                </div>
            </section>
            <section id="categories-view" class="page-section" style="display: none;">
                <h2>Categories</h2>
                <div class="page-content">
                    <p>Manage your expense and income categories here.</p>
                </div>
            </section>
            <section id="import-export-view" class="page-section" style="display: none;">
                <h2>Import & Export</h2>
                <div class="page-content">
                    <p>Import transactions from a CSV file or export your data.</p>
                </div>
            </section>
            <section id="settings-view" class="page-section" style="display: none;">
                <h2>User Settings</h2>
                <div class="page-content">
                    <p>Manage your account, profile, and app settings here.</p>
                </div>
            </section>
        </main>
    </div>

    <script src="JS/dashboard.js"></script>
</body>
</html>


=============================== gemini dashboard.css =======================

/* ============ CSS Variables ============== */
:root {
    --primary-color: #4f46e5;
    --secondary-color: #9333ea;
    --accent-color: #7e22ce;
    --text-color-dark: #2c3e50;
    --text-color-light: #ecf0f1;
    --bg-light: #f5f7fa;
    --bg-card: #fff;
    --border-color: #e0e6ed;
    --shadow: rgba(0, 0, 0, 0.08);
}

/* ============ Global Reset ============== */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Arial', sans-serif;
}

body {
    background-color: var(--bg-light);
    color: var(--text-color-dark);
    padding-top: 90px; /* Crucial padding to account for the fixed nav-bar */
}

a {
    text-decoration: none;
    color: var(--primary-color);
}

button {
    cursor: pointer;
    border: none;
    outline: none;
    background: transparent;
}
/* ================= Toast notification css ================== */

/* ========= Error msg ============= */

.error-message {
  color: #a30000; /* red */
  font-size: 0.8rem;
  margin-top: 4px;
  display: block;
}

/* =========== toast msg css ============== */

/* Toast Container */
#toast-container {
    position: fixed;
    bottom: 20px;
    right: 20px;
    z-index: 1000;
    display: flex;
    flex-direction: column;
    gap: 10px;
}

/* Base Toast Styles */
.toast {
    padding: 15px 20px;
    border-radius: 5px;
    color: #fff;
    font-family: Arial, sans-serif;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    opacity: 0;
    transition: opacity 0.5s ease-in-out, transform 0.5s ease-in-out;
    transform: translateX(100%);
    min-width: 250px;
    cursor: pointer;
}

.toast.show {
    opacity: 1;
    transform: translateX(0);
}

/* Success and Error Colors */
.toast.success {
    background-color: #28a745; 
}

.toast.error {
    background-color: #dc3545; 
}


.toast.loading {
    background-color: #3498db; 
    color: white;
}

.loading-spinner {
    border: 4px solid rgba(255, 255, 255, 0.3);
    border-top: 4px solid #fff;
    border-radius: 50%;
    width: 20px;
    height: 20px;
    animation: spin 1s linear infinite;
    display: inline-block;
    margin-left: 10px;
    vertical-align: middle;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}


/* ================= Navigation Bar  ================ */
.nav-bar {
    height: 90px;
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: space-between;
    flex-wrap: wrap;
    position: fixed;
    top: 0;
    left: 0;
    background: #9333ea;
    padding: 0 28px;
    z-index: 500;
}

.nav-left h2 {
    font-size: 1.8rem;
    font-weight: 500;
    color: #111;
    cursor: pointer;
}

.nav-right {
    flex-basis: 45%;
}

.nav-right .nav-links {
    display: flex;
    justify-content: space-evenly;
    align-items: center;
    height: 80px;
    gap: 1rem;
}

.nav-right .nav-links li {
    list-style: none;
}

.nav-right .nav-links a {
    font-size: 1.3rem;
    text-decoration: none;
    color: #111;
    position: relative;
}

.nav-right .nav-links a::after {
    content: "";
    position: absolute;
    bottom: -4px;
    left: 0;
    height: 2px;
    width: 0;
    background-color: #54009e;
    border-radius: 10px;
    transition: 0.2s;
}

.nav-right .nav-links a:hover::after {
    width: 100%;
}

.nav-right .nav-links .sign-up {
    height: 32px;
    width: 90px;
    font-size: 1.1rem;
    border-radius: 5px;
    outline: none;
    border: none;
    cursor: pointer;
    transition: 0.3s;
    color: #7e22ce;
    background-color: var(--bg-light);

}

.nav-right .nav-links .sign-up:hover {
    background-color: #7e22ce;
    color: #fff;
}


/* ============ Layout and Animations ============== */
.layout.grid {
    display: grid;
    grid-template-columns: 280px 1fr;
    min-height: 100vh;
}

/* Base animation classes */
.fade-in {
    animation: fadeIn 0.8s ease forwards;
    opacity: 0;
}

.slide-left {
    animation: slideInLeft 0.8s ease forwards;
    opacity: 0;
    transform: translateX(-20px);
}

.slide-right {
    animation: slideInRight 0.8s ease forwards;
    opacity: 0;
    transform: translateX(20px);
}

/* Keyframes */
@keyframes fadeIn {
    to {
        opacity: 1;
    }
}

@keyframes slideInLeft {
    to {
        opacity: 1;
        transform: translateX(0);
    }
}

@keyframes slideInRight {
    to {
        opacity: 1;
        transform: translateX(0);
    }
}

/* ============ Sidebar ============== */
.sidebar {
    background-color: var(--bg-card);
    border-right: 1px solid var(--border-color);
    padding: 2rem 1rem;
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
}

.profile-card {
    text-align: center;
    margin-bottom: 1rem;
}

.profile-avatar {
    width: 80px;
    height: 80px;
    border-radius: 50%;
    margin-bottom: 0.5rem;
    border: 3px solid var(--primary-color);
}

.profile-name {
    font-size: 1.2rem;
    font-weight: bold;
}

.profile-email {
    font-size: 0.9rem;
    color: #777;
}

.sidebar .nav-links {
    list-style: none;
}

.sidebar .nav-links li {
    margin-bottom: 0.5rem;
}

.sidebar .nav-links a {
    display: block;
    padding: 0.8rem 1rem;
    border-radius: 8px;
    color: var(--text-color-dark);
    transition: background-color 0.3s, color 0.3s;
}

.sidebar .nav-links a i {
    margin-right: 0.8rem;
    font-size: 1.1rem;
}

.sidebar .nav-links a:hover {
    background-color: var(--accent-color);
    color: var(--text-color-light);
}

.sidebar-footer-links a {
    display: block;
    padding: 0.5rem 1rem;
    font-size: 0.9rem;
    color: #555;
}

/* ============ Main Content Sections ============== */
.main-content {
    padding: 2rem;
}

.header-row {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
}

.breadcrumbs a {
    font-size: 0.9rem;
    color: #888;
}

.breadcrumbs a:hover {
    text-decoration: underline;
}

.controls {
    display: flex;
    align-items: center;
}

.controls .date-range-picker {
    padding: 0.5rem;
    border: 1px solid var(--border-color);
    border-radius: 5px;
}

/* ============ Overview Cards ============== */
.overview-cards {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
}

.card {
    background-color: var(--bg-card);
    padding: 1.5rem;
    border-radius: 12px;
    box-shadow: 0 4px 10px var(--shadow);
    transition: transform 0.3s;
}

.card:hover {
    transform: translateY(-5px);
}

.card h4 {
    font-size: 1rem;
    font-weight: 500;
    color: #777;
    margin-bottom: 0.5rem;
}

.big-number {
    font-size: 2.5rem;
    font-weight: bold;
    color: var(--primary-color);
}

.percentage-change {
    font-size: 0.9rem;
    color: #27ae60; /* Green for positive change */
}

/* ============ Dashboard Grid ============== */
.dashboard-grid {
    display: grid;
    grid-template-columns: 2fr 1fr;
    grid-template-rows: auto auto;
    gap: 1.5rem;
    margin-bottom: 2rem;
}

.chart-card {
    grid-column: 1 / 2;
}

.pie-card {
    grid-column: 2 / 3;
}

.transactions-card {
    grid-column: 1 / 3;
}

.quick-add-card {
    grid-column: 1 / 3;
}

/* Card Content Styles */
.chart-card h3,
.pie-card h3,
.transactions-card h3,
.quick-add-card h3 {
    font-size: 1.5rem;
    margin-bottom: 1rem;
    color: var(--primary-color);
}

.toggle-buttons button {
    padding: 0.5rem 1rem;
    border-radius: 5px;
    transition: background-color 0.3s, color 0.3s;
}

.toggle-buttons button:hover {
    background-color: var(--primary-color);
    color: var(--text-color-light);
}

/* ============ Reports and Activity Log ============== */
.reports-section,
.activity-log {
    background-color: var(--bg-card);
    padding: 1.5rem;
    border-radius: 12px;
    box-shadow: 0 4px 10px var(--shadow);
    margin-bottom: 2rem;
}

.reports-section h3,
.activity-log h3 {
    font-size: 1.5rem;
    margin-bottom: 1rem;
    color: var(--primary-color);
}

.report-links a {
    display: inline-block;
    padding: 0.5rem 1rem;
    border: 1px solid var(--border-color);
    border-radius: 5px;
    margin-right: 0.5rem;
    transition: background-color 0.3s, color 0.3s;
}

.report-links a:hover {
    background-color: var(--primary-color);
    color: var(--text-color-light);
}

/* ============ Modals ============== */
#modals .modal {
    display: none; /* Hide modals by default */
    position: fixed;
    z-index: 2000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    justify-content: center;
    align-items: center;
}

.modal-content {
    background-color: var(--bg-card);
    padding: 2rem;
    border-radius: 12px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
}

/* ============ Footer ============== */
.footer {
    text-align: center;
    padding: 2rem;
    border-top: 1px solid var(--border-color);
}

.footer a {
    margin: 0 0.5rem;
}

/* ============ Responsive Design ============== */
@media (max-width: 1024px) {
    .layout.grid {
        grid-template-columns: 1fr;
    }
    
    .sidebar {
        display: none; /* Hide sidebar on small screens */
    }

    .dashboard-grid {
        grid-template-columns: 1fr;
        grid-template-rows: auto;
    }

    .chart-card,
    .pie-card,
    .transactions-card,
    .quick-add-card {
        grid-column: 1 / 2;
    }
}

@media (max-width: 900px) {
    .nav-bar {
        flex-direction: column;
        align-items: flex-start;
        height: auto;
        padding: 12px 20px;
    }

    .nav-right {
        flex-basis: 100%;
        width: 100%;
    }

    .nav-right .nav-links {
        align-items: flex-start;
        justify-content: flex-start;
        width: 100%;
        height: auto;
        margin-top: 10px;
        gap: 12px;
    }

    .nav-right .nav-links li a {
        font-size: 1.1rem;
    }

    .nav-right .nav-links .sign-up {
        align-self: flex-start;
    }
}

@media (max-width: 768px) {
    .main-content {
        padding: 1rem;
    }

    .overview-cards {
        grid-template-columns: 1fr;
    }
    
    .card {
        padding: 1rem;
    }
    
    .big-number {
        font-size: 2rem;
    }
    
    h3 {
        font-size: 1.2rem;
    }
}

@media (max-width: 480px) {
    .nav-left h2 {
        font-size: 1.4rem;
    }
    .nav-right .nav-links li a {
        font-size: 1rem;
    }
     .nav-right .nav-links .sign-up {
        align-self: flex-start;
        height: 24px;
        width: 70px;
        font-size: 0.95rem;
        margin-top: -2px;
    }
}


============================ gemini dashboard.js =============================

// ================== Shared Utilities (From your auth.js & script.js) ==================

const toastContainer = document.getElementById('toast-container');
let currentToast = null;

function notify(message, type = 'success', duration = 3000) {
    if (currentToast) dismissToast(currentToast);
    
    const toast = document.createElement('div');
    toast.className = `toast ${type}`;
    
    if (type === 'loading') {
        toast.innerHTML = `${message} <div class="loading-spinner"></div>`;
    } else {
        toast.textContent = message;
    }

    toast.addEventListener('click', () => dismissToast(toast));
    toastContainer.appendChild(toast);
    currentToast = toast;

    setTimeout(() => toast.classList.add('show'), 10);

    if (type !== 'loading') {
        setTimeout(() => dismissToast(toast), duration);
    }
}

function dismissToast(toastElement) {
    toastElement.classList.remove('show');
    toastElement.addEventListener('transitionend', () => {
        if (!toastElement.classList.contains('show')) {
            toastElement.remove();
            if (currentToast === toastElement) currentToast = null;
        }
    }, { once: true });
}

// Token Handling
function saveTokens({ accessToken, refreshToken }) {
    localStorage.setItem("accessToken", accessToken);
    localStorage.setItem("refreshToken", refreshToken);
}

function getAccessToken() {
    return localStorage.getItem("accessToken");
}

function getRefreshToken() {
    return localStorage.getItem("refreshToken");
}

function clearTokens() {
    localStorage.removeItem("accessToken");
    localStorage.removeItem("refreshToken");
}

async function refreshAccessToken() {
    const refreshToken = getRefreshToken();
    if (!refreshToken) return null;

    try {
        const res = await fetch("http://localhost:8080/auth/refresh", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ refreshToken }),
        });

        if (res.ok) {
            const data = await res.json();
            saveTokens(data);
            return data.accessToken;
        } else {
            clearTokens();
            return null;
        }
    } catch (err) {
        console.error("Refresh failed:", err);
        clearTokens();
        return null;
    }
}

async function getValidAccessToken() {
    let token = getAccessToken();
    if (!token) return null;

    try {
        const payload = JSON.parse(atob(token.split(".")[1]));
        const now = Date.now() / 1000;

        if (payload.exp < now) {
            console.log("Access token expired. Refreshing...");
            token = await refreshAccessToken();
        }
    } catch (err) {
        console.warn("Invalid token:", err);
        clearTokens();
        return null;
    }

    return token;
}

// ================== Dashboard API Calls ==================
const API_BASE_URL = "http://localhost:8080/api";

async function fetchDashboardData() {
    const token = await getValidAccessToken();
    if (!token) {
        notify("Session expired. Please log in again.", "error");
        setTimeout(() => window.location.href = "auth.html", 1500);
        return;
    }

    notify("Fetching dashboard data...", "loading");

    try {
        const response = await fetch(`${API_BASE_URL}/dashboard`, {
            method: 'GET',
            headers: {
                "Authorization": `Bearer ${token}`,
                "Content-Type": "application/json"
            }
        });
        
        if (response.ok) {
            const data = await response.json();
            notify("Data loaded successfully!", "success");
            renderDashboard(data);
        } else {
            notify("Failed to load dashboard data.", "error");
        }
    } catch (err) {
        console.error("Fetch dashboard data error:", err);
        notify("Could not connect to server.", "error");
    }
}

async function addTransaction(transactionData) {
    const token = await getValidAccessToken();
    if (!token) {
        notify("Session expired. Please log in again.", "error");
        setTimeout(() => window.location.href = "auth.html", 1500);
        return;
    }

    notify("Adding transaction...", "loading");
    
    try {
        const response = await fetch(`${API_BASE_URL}/transactions`, {
            method: 'POST',
            headers: {
                "Authorization": `Bearer ${token}`,
                "Content-Type": "application/json"
            },
            body: JSON.stringify(transactionData)
        });

        if (response.ok) {
            notify("Transaction added successfully!", "success");
            fetchDashboardData(); // Refresh the dashboard data
        } else {
            const error = await response.json();
            notify(`Failed to add transaction: ${error.message}`, "error");
        }
    } catch (err) {
        console.error("Add transaction error:", err);
        notify("Could not connect to server.", "error");
    }
}

async function deleteTransaction(transactionId) {
    const token = await getValidAccessToken();
    if (!token) {
        notify("Session expired. Please log in again.", "error");
        setTimeout(() => window.location.href = "auth.html", 1500);
        return;
    }

    notify("Deleting transaction...", "loading");

    try {
        const response = await fetch(`${API_BASE_URL}/transactions/${transactionId}`, {
            method: 'DELETE',
            headers: {
                "Authorization": `Bearer ${token}`
            }
        });

        if (response.ok) {
            notify("Transaction deleted successfully!", "success");
            fetchDashboardData(); // Refresh the dashboard data
        } else {
            notify("Failed to delete transaction.", "error");
        }
    } catch (err) {
        console.error("Delete transaction error:", err);
        notify("Could not connect to server.", "error");
    }
}

// ================== UI Rendering and Event Handlers ==================

function renderDashboard(data) {
    // 1. Update Summary Cards
    document.getElementById("total-balance").textContent = `$${data.summary.totalBalance.toFixed(2)}`;
    document.getElementById("total-income").textContent = `$${data.summary.totalIncome.toFixed(2)}`;
    document.getElementById("total-expenses").textContent = `$${data.summary.totalExpenses.toFixed(2)}`;

    // 2. Render Transactions Table
    const tableBody = document.getElementById("transactions-table").querySelector("tbody");
    tableBody.innerHTML = ""; // Clear existing rows

    data.transactions.forEach(tx => {
        const row = document.createElement("tr");
        const amountClass = tx.type === 'income' ? 'income-amount' : 'expense-amount';
        row.innerHTML = `
            <td>${tx.description}</td>
            <td class="${amountClass}">$${tx.amount.toFixed(2)}</td>
            <td>${tx.type.charAt(0).toUpperCase() + tx.type.slice(1)}</td>
            <td>${new Date(tx.date).toLocaleDateString()}</td>
            <td>
                <button class="delete-btn" data-id="${tx.id}">
                    <i class="fa-solid fa-trash-alt"></i>
                </button>
            </td>
        `;
        tableBody.appendChild(row);
    });

    // Add event delegation for delete buttons
    tableBody.addEventListener("click", (e) => {
        const deleteButton = e.target.closest(".delete-btn");
        if (deleteButton) {
            const transactionId = deleteButton.getAttribute("data-id");
            if (confirm("Are you sure you want to delete this transaction?")) {
                deleteTransaction(transactionId);
            }
        }
    });

    // 3. Update User Profile Name (Assuming it's available in the response)
    const userNameElement = document.getElementById("user-name");
    if (userNameElement && data.user && data.user.name) {
        userNameElement.textContent = data.user.name;
    }
}

// Add Transaction Form Submission (from dashboard view)
const quickAddForm = document.getElementById("quick-add-form");
quickAddForm.addEventListener("submit", (e) => {
    e.preventDefault();
    
    const description = document.getElementById("quick-description").value;
    const amount = parseFloat(document.getElementById("quick-amount").value);
    const type = document.getElementById("quick-type").value;
    
    if (description && amount > 0 && type) {
        const transactionData = { description, amount, type };
        addTransaction(transactionData);
        quickAddForm.reset();
    } else {
        notify("Please fill out all fields correctly.", "error");
    }
});

// Full Add Transaction Form Submission
const fullAddForm = document.getElementById("add-transaction-form");
fullAddForm.addEventListener("submit", (e) => {
    e.preventDefault();
    
    const description = document.getElementById("transaction-description").value;
    const amount = parseFloat(document.getElementById("transaction-amount").value);
    const type = document.getElementById("transaction-type").value;
    const category = document.getElementById("transaction-category").value;
    const date = document.getElementById("transaction-date").value;
    
    if (description && amount > 0 && type && category && date) {
        const transactionData = { description, amount, type, category, date };
        addTransaction(transactionData);
        fullAddForm.reset();
        loadPageContent('dashboard'); 
    } else {
        notify("Please fill out all fields correctly.", "error");
    }
});

// Logout Button
const logoutBtn = document.getElementById("logout-btn");
if (logoutBtn) {
    logoutBtn.addEventListener("click", async () => {
        const refreshToken = getRefreshToken();
        notify("Logging out...", "loading");

        try {
            if (refreshToken) {
                await fetch("http://localhost:8080/auth/logout", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ refreshToken }),
                });
            }
        } catch (err) {
            console.error("Logout request failed:", err);
        }
        
        clearTokens();
        notify("Logged out successfully!", "success");
        setTimeout(() => window.location.href = "auth.html", 1200);
    });
}

// ================== Sidebar Navigation Logic ==================

const sidebarLinks = document.querySelectorAll('.sidebar .nav-links a');
const pageSections = document.querySelectorAll('.page-section');

function loadPageContent(page) {
    pageSections.forEach(section => {
        section.style.display = 'none';
    });

    const targetSection = document.getElementById(page + '-view');
    if (targetSection) {
        targetSection.style.display = 'block';
    }

    if (page === 'dashboard') {
        fetchDashboardData();
    }
}

sidebarLinks.forEach(link => {
    link.addEventListener('click', (e) => {
        e.preventDefault();
        
        sidebarLinks.forEach(a => a.classList.remove('active'));
        link.classList.add('active');

        const page = link.dataset.page;
        loadPageContent(page);
    });
});

// ================== Initialization ==================
document.addEventListener("DOMContentLoaded", () => {
    const token = getAccessToken();
    if (!token) {
        notify("Please log in to view the dashboard.", "error");
        setTimeout(() => window.location.href = "auth.html", 1500);
        return;
    }

    const defaultLink = document.querySelector('.sidebar .nav-links a[data-page="dashboard"]');
    if (defaultLink) {
        defaultLink.classList.add('active');
    }

    loadPageContent('dashboard');
});